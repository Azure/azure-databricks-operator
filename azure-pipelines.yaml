trigger:
  branches:
    include:
    - master

pool:
  vmImage: 'Ubuntu 16.04'

variables:
  IMAGE_NAME: 'candidate/k8s/azure-databricks/operator:$(Build.SourceVersion)'
  # ACR_NAME:           - set this value in Azure Devops variables
  # AZURE_SUBSCRIPTION: - set this value in Azure Devops variables
  # DATABRICKS_HOST:    - set this value in Azure Devops variables
  # DATABRICKS_TOKEN:   - set this value in Azure Devops variables

jobs:
- job: Build
  steps:
  # Cache the docker image file
  - task: CacheBeta@0
    inputs:
      key: go-cache | go.sum
      path: ".gocache"
      restoreKeys: go-cache 
    displayName: Cache go mod cache

  # Cache the docker image file
  - task: CacheBeta@0
    inputs:
      key: docker-image | .devcontainer/**
      path: ".dockercache"
      restoreKeys: docker-image
      cacheHitVar: DOCKER_CACHE_HIT
    displayName: Cache docker layers

  - script: |
      bash -f ./ci.sh
    displayName: 'Run CI'
    env:	
      GO111MODULE: on	
      DATABRICKS_HOST: $(DATABRICKS_HOST)	
      DATABRICKS_TOKEN: $(DATABRICKS_TOKEN)

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: Cobertura 
      summaryFileLocation: $(System.DefaultWorkingDirectory)/**/cover.xml
      reportDirectory: $(System.DefaultWorkingDirectory)/**/cover

  - script: docker build -t $(IMAGE_NAME) .  # add options to this command to meet your needs
    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: 'Docker build'

  - task: AzureCLI@1
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: Push to Azure Container Registry
    inputs:
      azureSubscription: $(AZURE_SUBSCRIPTION)
      scriptLocation: inlineScript
      failOnStandardError: false
      inlineScript: az acr build --registry $(ACR_NAME) --image $(IMAGE_NAME) .

  - script: |
      ./bin/kustomize build config/default > $(Build.ArtifactStagingDirectory)/setup.yaml
      set -x
      echo $(IMAGE_NAME) > $(Build.ArtifactStagingDirectory)/azure-databricks-operator.txt
      ls $(Build.ArtifactStagingDirectory)
    continueOnError: 'false'
    displayName: 'Prepare manifests for publish'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master')) 

  - task: PublishBuildArtifacts@1
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)
      artifactName: drop
